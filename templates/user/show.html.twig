{% extends 'base.html.twig' %}

{% block title %}Profil de {{ user.username }} - GourmetHub{% endblock %}

{% block body %}
<div class="container mt-5">

    <div class="row mb-4">
        <!-- Avatar et pseudo -->
        <div class="col-md-3 text-center">
            {% if user.avatar %}
                <img src="{{ asset('uploads/avatars/' ~ user.avatar) }}" class="rounded-circle img-thumbnail" style="width:150px; height:150px; object-fit:cover;" alt="{{ user.username }}">
            {% else %}
                <img src="{{ asset('images/default-avatar.png') }}" class="rounded-circle img-thumbnail" style="width:150px; height:150px; object-fit:cover;" alt="Avatar par défaut">
            {% endif %}
            <h3 class="mt-3">{{ user.username }}</h3>
        </div>

        <!-- Description -->
        <div class="col-md-9">
            <div class="card p-3">
                {% if user.presentation %}
                    <p>{{ user.presentation }}</p>
                {% else %}
                    <p class="text-muted">Cette personne n'a pas encore ajouté de présentation.</p>
                {% endif %}
            </div>
        </div>
    </div>

    <!-- Recettes créées par l'utilisateur -->
    <h4>Recettes créées par {{ user.username }}</h4>
    {% if recipes|length > 0 %}
        <div class="row row-cols-1 row-cols-md-3 g-4 mt-2">
            {% for recipe in recipes %}
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        {% if recipe.image %}
                            <img src="{{ asset('uploads/recipes/' ~ recipe.image) }}" class="card-img-top" alt="{{ recipe.title }}">
                        {% else %}
                            <img src="https://via.placeholder.com/400x200?text=Recette" class="card-img-top" alt="{{ recipe.title }}">
                        {% endif %}
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">{{ recipe.title }}</h5>
                            <p class="card-text">{{ recipe.description|slice(0, 80) ~ '...' }}</p>
                            <a href="#" class="btn btn-sm btn-primary mt-auto" data-bs-toggle="modal" data-bs-target="#recipeModal{{ recipe.id }}">
                                Voir la recette
                            </a>
                        </div>
                    </div>
                </div>

                {# Modale pour la recette #}
                <div class="modal fade" id="recipeModal{{ recipe.id }}" tabindex="-1" aria-labelledby="recipeModalLabel{{ recipe.id }}" aria-hidden="true">
                    <div class="modal-dialog modal-lg modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="recipeModalLabel{{ recipe.id }}">{{ recipe.title }}</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
                            </div>
                            <div class="modal-body">
                                {% if recipe.image %}
                                    <img src="{{ asset('uploads/recipes/' ~ recipe.image) }}" class="img-fluid mb-3" alt="{{ recipe.title }}">
                                {% endif %}
                                <p><strong>Description:</strong> {{ recipe.description }}</p>
                                <p><strong>Ingrédients:</strong></p>
                                <pre>{{ recipe.ingredients }}</pre>
                                <p><strong>Étapes:</strong></p>
                                <pre>{{ recipe.steps }}</pre>
                                <p><strong>Catégorie:</strong> {{ recipe.category.name }}</p>
                                <p><strong>Préparation:</strong> {{ recipe.preparationTime }} min</p>

                                <hr>

                                {# Section notation #}
                                <div class="rating-section text-center">
                                    {% set userRating = null %}
                                    {% for r in recipe.ratings %}
                                        {% if app.user and r.user.id == app.user.id %}
                                            {% set userRating = r.value %}
                                        {% endif %}
                                    {% endfor %}

                                    <p>
                                        Note moyenne :
                                        <span id="average-rating-{{ recipe.id }}">
                                            {{ recipe.getAverageRating() ? recipe.getAverageRating()|number_format(1) : 'Pas encore notée' }}
                                        </span>
                                        ({{ recipe.ratings|length }} vote{{ recipe.ratings|length > 1 ? 's' : '' }})
                                    </p>

                                    {% if app.user %}
                                        <div class="rating-stars" data-recipe-id="{{ recipe.id }}">
                                            {% for i in 1..5 %}
                                                <i class="fa-star star {{ i <= (userRating ?: 0) ? 'fa-solid' : 'fa-regular' }}" data-value="{{ i }}" style="cursor:pointer; font-size:1.5rem;"></i>
                                            {% endfor %}
                                        </div>
                                        <small id="rating-feedback-{{ recipe.id }}" class="text-success d-block mt-2"></small>
                                    {% else %}
                                        <p class="text-muted">Connectez-vous pour noter cette recette.</p>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            {% endfor %}
        </div>
    {% else %}
        <p class="text-muted mt-3">{{ user.username }} n'a créé aucune recette pour le moment.</p>
    {% endif %}

</div>
{% endblock %}

{% block javascripts %}
<script>
document.addEventListener('DOMContentLoaded', function () {
    // Gestion favoris
    const buttons = document.querySelectorAll('.favorite-btn');
    buttons.forEach(btn => {
        btn.addEventListener('click', function () {
            const recipeId = this.dataset.id;
            const csrfToken = '{{ csrf_token("authenticate") }}';
            fetch('{{ path("favorite_toggle", {"id": "REPLACE_ID"}) }}'.replace('REPLACE_ID', recipeId), {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-CSRF-TOKEN': csrfToken
                }
            }).then(response => response.json()).then(data => {
                if (data.status === 'added') {
                    this.querySelector('i').classList.remove('fa-regular');
                    this.querySelector('i').classList.add('fa-solid');
                } else if (data.status === 'removed') {
                    this.querySelector('i').classList.remove('fa-solid');
                    this.querySelector('i').classList.add('fa-regular');
                }
            }).catch(err => console.error('Erreur favorite:', err));
        });
    });

    // Gestion étoiles dans les modales
    const attachRatingListeners = (modal) => {
        const stars = modal.querySelectorAll('.rating-stars .star');
        stars.forEach(star => {
            star.addEventListener('click', function () {
                const value = this.dataset.value;
                const recipeId = this.closest('.rating-stars').dataset.recipeId;
                const csrfToken = '{{ csrf_token("authenticate") }}';

                fetch('{{ path("rating_add", {"id": "REPLACE_ID"}) }}'.replace('REPLACE_ID', recipeId), {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest',
                        'X-CSRF-TOKEN': csrfToken
                    },
                    body: JSON.stringify({ rating: value })
                }).then(res => res.json()).then(data => {
                    if (data.success) {
                        document.getElementById('average-rating-' + recipeId).textContent = data.newAverage.toFixed(1);
                        document.getElementById('rating-feedback-' + recipeId).textContent = "Merci pour votre note !";

                        const stars = document.querySelectorAll('.rating-stars[data-recipe-id="' + recipeId + '"] .star');
                        stars.forEach(s => {
                            if (s.dataset.value <= value) {
                                s.classList.remove('fa-regular');
                                s.classList.add('fa-solid');
                            } else {
                                s.classList.remove('fa-solid');
                                s.classList.add('fa-regular');
                            }
                        });
                    }
                }).catch(err => console.error('Erreur rating:', err));
            });
        });
    };

    // Attacher listeners à l'ouverture de chaque modale
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        modal.addEventListener('show.bs.modal', function () {
            attachRatingListeners(this);

            // Increment views
            const recipeId = this.id.replace('recipeModal', '');
            fetch('{{ path("recipe_increment_view", {"id": "REPLACE_ID"}) }}'.replace('REPLACE_ID', recipeId), {
                method: 'POST',
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            }).then(res => res.json()).then(data => {
                console.log('Vues mise à jour pour la recette', recipeId, data.views);
            }).catch(err => console.error('Erreur mise à jour vues:', err));
        });
    });
});
</script>
{% endblock %}
